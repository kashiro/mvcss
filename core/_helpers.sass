//-------------------------------------
//  Helpers
//-------------------------------------

// ----- Extends ----- //

// @extend %debug
// -- Utility for debugging layout issues

%debug
  background-color: pink !important

// @extend %ellipsis
// -- CSS text truncation

%ellipsis
  overflow: hidden
  text-overflow: ellipsis
  white-space: nowrap

// @extend %group
// -- Clearfix

%group:after
  clear: both
  content: ''
  display: table

// @extend %ir
// -- Image replacement

%ir
  background-color: transparent
  border: 0
  overflow: hidden
  &:before
    content: ''
    display: block
    width: 0
    height: 150%

// ----- Functions ----- //

// em()
// -- Sizes a pixel value to appropriate ems

@function em($target, $context: $base-fontSize)
  @if ($target == 0)
    @return 0
  @else
    @return #{$target / $context}em

// rem()
// -- Sizes a pixel value to appropriate rems

@function rem($size)
  @return #{$size / $base-fontSize}rem

// ----- Mixins ----- //

// +respond-to()
// -- Generates a specified media query, which
//    defaults to 'min-width' and 'screen'

=respond-to($val, $query: min-width, $media: screen)
  @media #{$media} and ($query: $val)
    @content


// @include position-center(100px, 100px) 
@mixin position-center($width, $height) 
  position: absolute
  top: 50%
	left: 50%
	@if $width  != '' margin-left: -$width / 2
	@if $height != '' margin-top: -$height / 2


// @include position(ablosute, tr, 100px, 100px)
// -- keyword (tr, tl, br, bl)
@mixin position($position, $keyword, $value1, $value2)
  position: $position
  @if $keyword == tr
    top: $value1
    right: $value2
  @else if $keyword == tl
    top: $value1
    left: $value2
  @else if $keyword == br
    bottom: $value1
    right: $value2
  @else if $keyword == bl
    bottom: $value1
    left: $value2


// retina_background(/img/hoge.png, no-repeat center center)
@mixin retina_background($url, $option) 
  background: image-url($url) + " #{$option}"
  background-size: round(image-width($url) / 2) round(image-height($url) / 2)


// retina_background(/path/to/text/image.png)
@mixin ir($url)
  width: round(image-width($url)
  height: round(image-height($url)
  @extend %ir
  background: url($url) no-repeat center center

// pseudo-ba(/path/to/image.png, 10px, 10px, 10@x, 10px)
@mixin pseudo-ba($url,$top,$left,$width,$height)
  display: block
  position: absolute
  content: ''
  width: $width
  height: $height
  top: $top
  left: $left
  background: image-url($url) no-repeat top left


@mixin sprite_img($map, $name, $map_url, $max_width)
    background-image: $map_url
    background-repeat: no-repeat
    display: block
    height: image-height(sprite-file($map_url, $name))
    width: image-width(sprite-file($map_url, $name))
    $ypos: round(nth(sprite-position($map_url, $name), 2))
    background-position: 0 $ypos
    @include background-size($max_width auto)


@mixin sprite_img_retina($map, $name, $map_url, $max_width)
    background-image: $map_url
    background-repeat: no-repeat
    display: block
    height: image-height(sprite-file($map_url, $name)) / 2
    width: image-width(sprite-file($map_url, $name)) / 2
    $ypos: round(nth(sprite-position($map_url, $name), 2) / 2)
    background-position: 0 $ypos
    @include background-size(($max_width / 2) auto)

// ----- Animations ----- //
