//-------------------------------------
//  Helpers
//-------------------------------------

// ----- Extends ----- //

// @extend %debug
// -- Utility for debugging layout issues

%debug
  background-color: pink !important

// @extend %ellipsis
// -- CSS text truncation

%ellipsis
  overflow: hidden
  text-overflow: ellipsis
  white-space: nowrap

// @extend %group
// -- Clearfix

%group:after
  clear: both
  content: ''
  display: table

// @extend %ir
// -- Image replacement

%ir
  background-color: transparent
  border: 0
  overflow: hidden
  &:before
    content: ''
    display: block
    width: 0
    height: 150%

// ----- Functions ----- //

// em()
// -- Sizes a pixel value to appropriate ems

@function em($target, $context: $base-fontSize)
  @if ($target == 0)
    @return 0
  @else
    @return #{$target / $context}em

// rem()
// -- Sizes a pixel value to appropriate rems

@function rem($size)
  @return #{$size / $base-fontSize}rem

// ----- Mixins ----- //

// set pixel value and convert rem value
// e.g. rem-prop(font-size, 1.6);
=rem-prop($prop-name, $val)
  $prop-name: #{$val}px
  $prop-name: rem($val)

// +respond-to()
// -- Generates a specified media query, which
//    defaults to 'min-width' and 'screen'

=respond-to($val, $query: min-width, $media: screen)
  @media #{$media} and ($query: $val)
    @content


@mixin position-center($width, $height)
  position: absolute
  top: 50%
  left: 50%
  margin-left: -$width / 2 * -1
  margin-top: -$height / 2 * -1


@mixin position($position, $keyword, $value1, $value2)
  position: $position
  @if $keyword == tr
    top: $value1
    right: $value2
  @else if $keyword == tl
    top: $value1
    left: $value2
  @else if $keyword == br
    bottom: $value1
    right: $value2
  @else if $keyword == bl
    bottom: $value1
    left: $value2


@mixin retina-background($url, $option)
  background: image-url($url) + " #{$option}"
  background-size: round(image-width($url) / 2) round(image-height($url) / 2)


@mixin ir($url)
  width: round(image-width($url))
  height: round(image-height($url))
  @extend %ir
  background: url($url) no-repeat center center


@mixin pseudo-elm($url, $top, $left, $width, $height)
  display: block
  position: absolute
  content: ''
  width: $width
  height: $height
  top: $top
  left: $left
  background: image-url($url) no-repeat top left


@mixin sprite-img($map, $name, $map-url, $max-width)
  background-image: $map-url
  background-repeat: no-repeat
  display: block
  height: image-height(sprite-file($map, $name))
  width: image-width(sprite-file($map, $name))
  $ypos: round(nth(sprite-position($map, $name), 2))
  background-position: 0 $ypos
  @include background-size($max-width auto)


@mixin sprite-img-retina($map, $name, $map-url, $max-width)
    background-image: $map-url
    background-repeat: no-repeat
    display: block
    height: image-height(sprite-file($map-url, $name)) / 2
    width: image-width(sprite-file($map-url, $name)) / 2
    $ypos: round(nth(sprite-position($map-url, $name), 2) / 2)
    background-position: 0 $ypos
    @include background-size(ceil(($max-width / 2)) auto)
